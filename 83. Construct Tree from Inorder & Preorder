/*
class Node {
public:
    int data;
    Node *left;
    Node *right;

    Node(int x) {
        data = x;
        left = NULL;
        right = NULL;
    }
};
*/

class Solution {
  public:
    Node *buildTreeRecur(unordered_map<int,int> &mp, vector<int> &preorder,int &preIndex, int left, int right){
        
        if(left > right) return nullptr;
        
        int rootVal = preorder[preIndex];
        preIndex++;
        
        Node *root = new Node(rootVal);
        
        int index = mp[rootVal];
        
        root->left = buildTreeRecur(mp, preorder, preIndex, left, index - 1);
        root->right = buildTreeRecur(mp, preorder, preIndex, index+1, right);
        
        return root;
        
    }
    
    Node *buildTree(vector<int> &inorder, vector<int> &preorder) {
        // code here
        
        unordered_map<int,int> mp;
        for(int i = 0 ; i < inorder.size() ; i++)
           mp[inorder[i]] = i;
           
        int preIndex = 0 ;
        Node *root = buildTreeRecur(mp, preorder, preIndex, 0 , inorder.size() - 1);
        
        return root;
        
    }
    
    int getHeight(Node* root , int h){
        if(root == nullptr) return h - 1;
        
        return max(getHeight(root->left, h+1), getHeight(root->right, h+1));
    }
    
    void levelOrder(Node* root){
        queue<pair<Node*, int>> q;
        q.push({root, 0});
        
        int lastLevel = 0;
        
        int height = getHeight(root, 0);
        
        while (!q.empty()) {
            auto top = q.front(); q.pop();
            
            Node* node = top.first;
            int lvl = top.second;
            
            if(lvl > lastLevel){
                cout<<"\n";
                lastLevel = lvl;
                
            }
            
            if (lvl > height) break;
            
            if(node->data != -1) cout<<node->data<< " ";
            
            else cout<<"N ";
            
            if(node->data == -1) continue;
            
            if(node->left == nullptr) q.push({new Node(-1), lvl+1});
            else q.push({node->left, lvl + 1});
            
            if(node->right == nullptr) q.push({new Node(-1), lvl+1});
            else q.push({node->right, lvl + 1});
            
            
        }
    }
};
