/*
class Node {
public:
    int data;
    Node *left, *right;
    Node(int x) {
        data = x;
        left = nullptr;
        right = nullptr;
    }
};
*/

void mirror(Node* root) {
    if (root == nullptr)
        return ;
    
    queue<Node*> q;
    q.push(root);
    
    
    while(!q.empty()) {
        Node* curr = q.front();
        q.pop();
      
      
        swap(curr->left, curr->right);
      
        
        if(curr->left != nullptr)
          q.push(curr->left);
        if(curr->right != nullptr)
          q.push(curr->right);
    }
}

int getHeight(Node* root, int h) {
    if (root == nullptr) return h - 1;
    return max(getHeight(root->left, h + 1), getHeight(root->right, h + 1));
}

void levelOrder(Node* root) {
    queue<pair<Node*, int>> q;
    q.push({root, 0});

    int lastLevel = 0;

    
    int height = getHeight(root, 0);

    
    while (!q.empty()) {
        auto top = q.front(); q.pop();
        Node* node = top.first;
        int lvl = top.second;

        if (lvl > lastLevel) {
            cout << "\n";
            lastLevel = lvl;
        }

        
        if (lvl > height) break;

        
        if (node->data != -1) cout << node->data << " ";
        
        
        else cout << "N ";

      
        if (node->data == -1) continue;

        if (node->left == nullptr) q.push({new Node(-1), lvl + 1});
        else q.push({node->left, lvl + 1});

        if (node->right == nullptr) q.push({new Node(-1), lvl + 1});
        else q.push({node->right, lvl + 1});
    }
};
