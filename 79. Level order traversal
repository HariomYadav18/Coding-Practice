/* A binary tree Node
class Node {
  public:
    int data;
    Node* left;
    Node* right;

    // Constructor
    Node(int val) {
        data = val;
        left = nullptr;
        right = nullptr;
    }
};
*/

class Solution {
  public:
    vector<vector<int>> levelOrder(Node *root) {
        // code here
        if(root == nullptr)
        return {};
        
        queue<Node *> q;
        vector<vector<int>> res;
        
        q.push(root);
        int currLevel;
        
        
        while(!q.empty()) {
            int len = q.size();
            res.push_back({});
            
            for(int i = 0 ; i < len ; i++){
                Node *node = q.front();
                q.pop();
                
                res[currLevel].push_back(node->data);
                
                
                if(node->left != nullptr)
                q.push(node->left);
                
                
                if(node->right != nullptr)
                q.push(node->right);
            }
            currLevel++;
        }
        
        return res;
    }
};
