/*
class Node {
public:
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = nullptr;
    }
};
*/

class Solution {
  public:
    vector<int> serialize(Node *root) {
        //  code here
        
        vector<int> arr;
        queue<Node*> q;
        q.push(root);
        
        while(!q.empty()){
            Node* curr = q.front();
            q.pop();
            
            if(curr == nullptr){
                arr.push_back(-1);
                continue;
            }
            
            arr.push_back(curr->data);
            
            q.push(curr->left);
            q.push(curr->right);
        }
        return arr;
        
    }

    Node *deSerialize(vector<int> &arr) {
        
        //  code here
        
        if(arr[0] == -1) return nullptr;
        
        Node* root = new Node(arr[0]);
        queue<Node*> q;
        
        q.push(root);
        int i = 1;
        while(!q.empty()){
            Node* curr = q.front();
            q.pop();
            
            
            if(arr[i] != -1){
                Node* left = new Node(arr[i]);
                
                curr->left = left;
                q.push(left);
                
                
            }
            i++;
            
            
            if(arr[i] != -1){
                Node* right = new Node(arr[i]);
                curr->right = right;
                q.push(right);
            }
            i++;
        }
        return root;
    }
};
